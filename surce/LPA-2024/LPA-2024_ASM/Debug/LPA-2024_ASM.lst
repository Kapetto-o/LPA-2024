Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/17/24 18:59:43
LPA-2024_ASM.asm					     Page 1 - 1


				.586
				.model flat, stdcall
				includelib libucrt.lib
				includelib kernel32.lib

				ExitProcess PROTO:DWORD 
				SYSPAUSE PROTO 
				soutl PROTO : BYTE 
				noutl PROTO : SDWORD 
				_strduplicate PROTO  : BYTE, : BYTE 
				_strlength PROTO  : BYTE 
				_strtransint PROTO  : BYTE 

				.STACK 4096

 00000000			.CONST
 00000000 45 52 52 4F 52		null_division BYTE 'ERROR: DIVISION BY ZERO', 0
	   3A 20 44 49 56
	   49 53 49 4F 4E
	   20 42 59 20 5A
	   45 52 4F 00
 00000018 45 52 52 4F 52		OVER_FLOW BYTE 'ERROR: OVERFLOW', 0
	   3A 20 4F 56 45
	   52 46 4C 4F 57
	   00
 00000028 74 72 75 65 00		true BYTE 'true', 0
 0000002D 66 61 6C 73 65		false BYTE 'false', 0
	   00
 00000033 54 65 73 74 54		str0 BYTE "TestText20", 0
	   65 78 74 32 30
	   00
 0000003E 00000002			short1 SDWORD 2
 00000042 00000000			short2 SDWORD 0
 00000046 00000001			short3 SDWORD 1
 0000004A 74 65 73 74 73		str4 BYTE "teststring", 0
	   74 72 69 6E 67
	   00
 00000055 00000001			bool5 DWORD 1
 00000059 61				char6 BYTE 'a'
 0000005A C0 F0 E8 F4 EC		str7 BYTE "Арифметические операции:", 0
	   E5 F2 E8 F7 E5
	   F1 EA E8 E5 20
	   EE EF E5 F0 E0
	   F6 E8 E8 3A 00
 00000073 0000000F			short8 SDWORD 15
 00000077 0000000A			short9 SDWORD 10
 0000007B 00000005			short10 SDWORD 5
 0000007F D3 EC ED EE E6		str11 BYTE "Умножение:", 0
	   E5 ED E8 E5 3A
	   00
 0000008A 0000000A			short12 SDWORD 10
 0000008E 00000005			short13 SDWORD 5
 00000092 C4 E5 EB E5 ED		str14 BYTE "Деление:", 0
	   E8 E5 3A 00
 0000009B 0000000F			short15 SDWORD 15
 0000009F 0000000A			short16 SDWORD 10
 000000A3 C4 E5 EB E5 ED		str17 BYTE "Деление с остатком:", 0
	   E8 E5 20 F1 20
	   EE F1 F2 E0 F2
	   EA EE EC 3A 00
 000000B7 0000000A			short18 SDWORD 10
 000000BB 00000005			short19 SDWORD 5
 000000BF D1 F3 EC EC E0		str20 BYTE "Сумма:", 0
	   3A 00
 000000C6 0000000A			short21 SDWORD 10
 000000CA 00000005			short22 SDWORD 5
 000000CE D0 E0 E7 ED E8		str23 BYTE "Разница:", 0
	   F6 E0 3A 00
 000000D7 00000005			short24 SDWORD 5
 000000DB 00000005			short25 SDWORD 5
 000000DF 00000005			short26 SDWORD 5
 000000E3 CF F0 E8 EE F0		str27 BYTE "Приоритет (=30):", 0
	   E8 F2 E5 F2 20
	   28 3D 33 30 29
	   3A 00
 000000F4 00000005			short28 SDWORD 5
 000000F8 00000005			short29 SDWORD 5
 000000FC 00000005			short30 SDWORD 5
 00000100 CF F0 E8 EE F0		str31 BYTE "Приоритет (=2):", 0
	   E8 F2 E5 F2 20
	   28 3D 32 29 3A
	   00
 00000110 54 65 73 74 54		str32 BYTE "TestText1", 0
	   65 78 74 31 00
 0000011A 00000000			short33 SDWORD 0
 0000011E 00000005			short34 SDWORD 5
 00000122 0000000A			short35 SDWORD 10
 00000126 D2 E5 F1 F2 EE		str36 BYTE "Тестовая строчка", 0
	   E2 E0 FF 20 F1
	   F2 F0 EE F7 EA
	   E0 00
 00000137 31 32 35 00			str37 BYTE "125", 0
 0000013B 00000000			short38 SDWORD 0
 0000013F 0000000A			short39 SDWORD 10
 00000143 00000001			short40 SDWORD 1
 00000000			.DATA
 00000000 00000000			res10 SDWORD 0
 00000004 00000000			parm231 DWORD ?
 00000008 00000000			phah57 DWORD 0
 0000000C 00000000			it76 SDWORD 0
 00000010 00000000			st76 DWORD ?
 00000014 00000000			bt76 DWORD 0
 00000018 00000000			ct76 DWORD 0
 0000001C 00000000			a76 SDWORD 0
 00000020 00000000			b76 SDWORD 0
 00000024 00000000			parm176 DWORD ?
 00000028 00000000			number76 SDWORD 0
 0000002C 00000000			pravda76 DWORD 0
 00000030 00000000			stroka76 DWORD ?
 00000034 00000000			strokachislo76 DWORD ?
 00000038 00000000			copystr76 DWORD ?
 0000003C 00000000			dlina76 SDWORD 0
 00000040 00000000			strchislo76 SDWORD 0
 00000044 00000000			i76 SDWORD 0

 00000000			.CODE

 00000000			testfunc11 PROC a1 : SDWORD, b1 : SDWORD
 00000003  FF 75 08			push a1
 00000006  FF 75 0C			push b1
 00000009  58				pop eax
 0000000A  5B				pop ebx
 0000000B  03 C3			add eax, ebx
 0000000D  50				push eax
 0000000E  58				pop eax
 0000000F  3D 00007FFF			cmp eax, 32767
 00000014  0F 8F 00000461		jg overflow
 0000001A  3D FFFF8000			cmp eax, -32768
 0000001F  0F 8C 00000456		jl overflow
 00000025  A3 00000000 R		mov res10, eax
 0000002A  FF 35 00000000 R		push res10
 00000030  EB 00			jmp local0
 00000032			local0:
 00000032  58				pop eax
					ret
 00000037			testfunc11 ENDP

 00000037			testfunc22 PROC parm12 : DWORD
 0000003A  68 00000033 R		push offset str0
 0000003F  8F 05 00000004 R		pop parm231
 00000045  FF 75 08			push parm12
 00000048  EB 00			jmp local1
 0000004A			local1:
 0000004A  58				pop eax
					ret
 0000004F			testfunc22 ENDP

 0000004F			testfunc43 PROC chetnoe3 : SDWORD
 00000052  FF 75 08			push chetnoe3
 00000055  5B				pop ebx
 00000056  58				pop eax
 00000057  83 FB 00			cmp ebx,0
 0000005A  0F 84 0000040F		je SOMETHINGWRONG
 00000060  99				cdq
 00000061  F7 FB			idiv ebx
 00000063  52				push edx
 00000064  FF 35 0000003E R		push short1
 0000006A  FF 35 00000042 R		push short2
 00000070  8F 05 00000008 R		pop phah57
 00000076  FF 35 00000008 R		push phah57
 0000007C  EB 00			jmp local2
 0000007E			local2:
 0000007E  58				pop eax
					ret
 00000083			testfunc43 ENDP

 00000083			main PROC
 00000083  FF 35 00000046 R		push short3
 00000089  58				pop eax
 0000008A  3D 00007FFF			cmp eax, 32767
 0000008F  0F 8F 000003E6		jg overflow
 00000095  3D FFFF8000			cmp eax, -32768
 0000009A  0F 8C 000003DB		jl overflow
 000000A0  A3 0000000C R		mov it76, eax
 000000A5  68 0000004A R		push offset str4
 000000AA  8F 05 00000010 R		pop st76
 000000B0  FF 35 00000055 R		push bool5
 000000B6  8F 05 00000014 R		pop bt76
					push char6
LPA-2024_ASM.asm(145) : error A2070:invalid instruction operands
 000000BC  58				pop eax
					mov ct76, al
LPA-2024_ASM.asm(147) : error A2022:instruction operands must be the same size
 000000BD  C7 05 00000019 R		mov ct76+1, 0
	   00000000

 000000C7  68 0000005A R	push offset str7
 000000CC  E8 00000000 E	call soutl
 000000D1  FF 35 00000073 R		push short8
 000000D7  58				pop eax
 000000D8  3D 00007FFF			cmp eax, 32767
 000000DD  0F 8F 00000398		jg overflow
 000000E3  3D FFFF8000			cmp eax, -32768
 000000E8  0F 8C 0000038D		jl overflow
 000000EE  A3 00000020 R		mov b76, eax
 000000F3  FF 35 00000077 R		push short9
 000000F9  FF 35 0000007B R		push short10
 000000FF  58				pop eax
 00000100  5B				pop ebx
 00000101  F7 E3			mul ebx
 00000103  50				push eax
 00000104  58				pop eax
 00000105  3D 00007FFF			cmp eax, 32767
 0000010A  0F 8F 0000036B		jg overflow
 00000110  3D FFFF8000			cmp eax, -32768
 00000115  0F 8C 00000360		jl overflow
 0000011B  A3 0000001C R		mov a76, eax

 00000120  68 0000007F R	push offset str11
 00000125  E8 00000000 E	call soutl

 0000012A  FF 35 0000001C R	push a76
 00000130  E8 00000000 E	call noutl
 00000135  FF 35 0000008A R		push short12
 0000013B  FF 35 0000008E R		push short13
 00000141  5B				pop ebx
 00000142  58				pop eax
 00000143  83 FB 00			cmp ebx,0
 00000146  0F 84 00000323		je SOMETHINGWRONG
 0000014C  99				cdq
 0000014D  F7 FB			idiv ebx
 0000014F  50				push eax
 00000150  58				pop eax
 00000151  3D 00007FFF			cmp eax, 32767
 00000156  0F 8F 0000031F		jg overflow
 0000015C  3D FFFF8000			cmp eax, -32768
 00000161  0F 8C 00000314		jl overflow
 00000167  A3 0000001C R		mov a76, eax

 0000016C  68 00000092 R	push offset str14
 00000171  E8 00000000 E	call soutl

 00000176  FF 35 0000001C R	push a76
 0000017C  E8 00000000 E	call noutl
 00000181  FF 35 0000009B R		push short15
 00000187  FF 35 0000009F R		push short16
 0000018D  5B				pop ebx
 0000018E  58				pop eax
 0000018F  83 FB 00			cmp ebx,0
 00000192  0F 84 000002D7		je SOMETHINGWRONG
 00000198  99				cdq
 00000199  F7 FB			idiv ebx
 0000019B  52				push edx
 0000019C  58				pop eax
 0000019D  3D 00007FFF			cmp eax, 32767
 000001A2  0F 8F 000002D3		jg overflow
 000001A8  3D FFFF8000			cmp eax, -32768
 000001AD  0F 8C 000002C8		jl overflow
 000001B3  A3 0000001C R		mov a76, eax

 000001B8  68 000000A3 R	push offset str17
 000001BD  E8 00000000 E	call soutl

 000001C2  FF 35 0000001C R	push a76
 000001C8  E8 00000000 E	call noutl
 000001CD  FF 35 000000B7 R		push short18
 000001D3  FF 35 000000BB R		push short19
 000001D9  58				pop eax
 000001DA  5B				pop ebx
 000001DB  03 C3			add eax, ebx
 000001DD  50				push eax
 000001DE  58				pop eax
 000001DF  3D 00007FFF			cmp eax, 32767
 000001E4  0F 8F 00000291		jg overflow
 000001EA  3D FFFF8000			cmp eax, -32768
 000001EF  0F 8C 00000286		jl overflow
 000001F5  A3 0000001C R		mov a76, eax

 000001FA  68 000000BF R	push offset str20
 000001FF  E8 00000000 E	call soutl

 00000204  FF 35 0000001C R	push a76
 0000020A  E8 00000000 E	call noutl
 0000020F  FF 35 000000C6 R		push short21
 00000215  FF 35 000000CA R		push short22
 0000021B  5B				pop ebx
 0000021C  58				pop eax
 0000021D  2B C3			sub eax, ebx
 0000021F  50				push eax
 00000220  58				pop eax
 00000221  3D 00007FFF			cmp eax, 32767
 00000226  0F 8F 0000024F		jg overflow
 0000022C  3D FFFF8000			cmp eax, -32768
 00000231  0F 8C 00000244		jl overflow
 00000237  A3 0000001C R		mov a76, eax

 0000023C  68 000000CE R	push offset str23
 00000241  E8 00000000 E	call soutl

 00000246  FF 35 0000001C R	push a76
 0000024C  E8 00000000 E	call noutl
 00000251  FF 35 000000D7 R		push short24
 00000257  FF 35 000000DB R		push short25
 0000025D  FF 35 000000DF R		push short26
 00000263  58				pop eax
 00000264  5B				pop ebx
 00000265  F7 E3			mul ebx
 00000267  50				push eax
 00000268  58				pop eax
 00000269  5B				pop ebx
 0000026A  03 C3			add eax, ebx
 0000026C  50				push eax
 0000026D  58				pop eax
 0000026E  3D 00007FFF			cmp eax, 32767
 00000273  0F 8F 00000202		jg overflow
 00000279  3D FFFF8000			cmp eax, -32768
 0000027E  0F 8C 000001F7		jl overflow
 00000284  A3 0000001C R		mov a76, eax

 00000289  68 000000E3 R	push offset str27
 0000028E  E8 00000000 E	call soutl

 00000293  FF 35 0000001C R	push a76
 00000299  E8 00000000 E	call noutl
 0000029E  FF 35 000000F4 R		push short28
 000002A4  FF 35 000000F8 R		push short29
 000002AA  58				pop eax
 000002AB  5B				pop ebx
 000002AC  03 C3			add eax, ebx
 000002AE  50				push eax
 000002AF  FF 35 000000FC R		push short30
 000002B5  5B				pop ebx
 000002B6  58				pop eax
 000002B7  83 FB 00			cmp ebx,0
 000002BA  0F 84 000001AF		je SOMETHINGWRONG
 000002C0  99				cdq
 000002C1  F7 FB			idiv ebx
 000002C3  50				push eax
 000002C4  58				pop eax
 000002C5  3D 00007FFF			cmp eax, 32767
 000002CA  0F 8F 000001AB		jg overflow
 000002D0  3D FFFF8000			cmp eax, -32768
 000002D5  0F 8C 000001A0		jl overflow
 000002DB  A3 0000001C R		mov a76, eax

 000002E0  68 00000100 R	push offset str31
 000002E5  E8 00000000 E	call soutl

 000002EA  FF 35 0000001C R	push a76
 000002F0  E8 00000000 E	call noutl
 000002F5  68 00000110 R		push offset str32
 000002FA  8F 05 00000024 R		pop parm176
 00000300  FF 35 0000011A R		push short33
 00000306  FF 35 0000011E R		push short34
 0000030C  E8 FFFFFCEF			call testfunc11
 00000311  50				push eax
 00000312  58				pop eax
 00000313  3D 00007FFF			cmp eax, 32767
 00000318  0F 8F 0000015D		jg overflow
 0000031E  3D FFFF8000			cmp eax, -32768
 00000323  0F 8C 00000152		jl overflow
 00000329  A3 00000028 R		mov number76, eax
 0000032E  FF 35 00000122 R		push short35
 00000334  E8 FFFFFD16			call testfunc43
 00000339  50				push eax
 0000033A  8F 05 0000002C R		pop pravda76

 00000340  FF 35 00000028 R	push number76
 00000346  E8 00000000 E	call noutl

 0000034B  FF 35 00000024 R	push parm176
 00000351  E8 00000000 E	call soutl
 00000356  A1 0000002C R		mov eax, pravda76
 0000035B  83 F8 00			cmp eax, 0
 0000035E  74 0D			jz pravda760T
 00000360  75 17			jnz pravda760F

 0000036D			pravda760T:

 0000036D  68 0000002D R	push offset false
 00000372  E8 00000000 E	call soutl

 00000377  EB 0A		jmp pravda760

 00000379			pravda760F:

 00000379  68 00000028 R	push offset true
 0000037E  E8 00000000 E	call soutl

 00000383			pravda760:
 00000383  68 00000126 R		push offset str36
 00000388  8F 05 00000030 R		pop stroka76
 0000038E  68 00000137 R		push offset str37
 00000393  8F 05 00000034 R		pop strokachislo76
 00000399  FF 35 00000030 R		push stroka76
 0000039F  E8 00000000 E		call _strlength
 000003A4  50				push eax
 000003A5  58				pop eax
 000003A6  3D 00007FFF			cmp eax, 32767
 000003AB  0F 8F 000000CA		jg overflow
 000003B1  3D FFFF8000			cmp eax, -32768
 000003B6  0F 8C 000000BF		jl overflow
 000003BC  A3 0000003C R		mov dlina76, eax
 000003C1  FF 35 00000034 R		push strokachislo76
 000003C7  E8 00000000 E		call _strtransint
 000003CC  50				push eax
 000003CD  58				pop eax
 000003CE  3D 00007FFF			cmp eax, 32767
 000003D3  0F 8F 000000A2		jg overflow
 000003D9  3D FFFF8000			cmp eax, -32768
 000003DE  0F 8C 00000097		jl overflow
 000003E4  A3 00000040 R		mov strchislo76, eax

 000003E9  FF 35 00000038 R	push copystr76
 000003EF  E8 00000000 E	call soutl

 000003F4  FF 35 0000003C R	push dlina76
 000003FA  E8 00000000 E	call noutl

 000003FF  FF 35 00000040 R	push strchislo76
 00000405  E8 00000000 E	call noutl
 0000040A  FF 35 0000013B R		push short38
 00000410  58				pop eax
 00000411  3D 00007FFF			cmp eax, 32767
 00000416  7F 63			jg overflow
 00000418  3D FFFF8000			cmp eax, -32768
 0000041D  7C 5C			jl overflow
 0000041F  A3 00000044 R		mov i76, eax
 00000424			cycle1:
 00000424  A1 00000044 R		mov eax, i76
 00000429  3B 05 0000013F R		cmp eax, short39
 0000042F  7D 32			jge cycleEnd1

 00000431  FF 35 00000044 R	push i76
 00000437  E8 00000000 E	call noutl
 0000043C  FF 35 00000044 R		push i76
 00000442  FF 35 00000143 R		push short40
 00000448  58				pop eax
 00000449  5B				pop ebx
 0000044A  03 C3			add eax, ebx
 0000044C  50				push eax
 0000044D  58				pop eax
 0000044E  3D 00007FFF			cmp eax, 32767
 00000453  7F 26			jg overflow
 00000455  3D FFFF8000			cmp eax, -32768
 0000045A  7C 1F			jl overflow
 0000045C  A3 00000044 R		mov i76, eax
 00000461  EB C1			jmp cycle1
 00000463			cycleEnd1:
 00000463  E8 00000000 E		call SYSPAUSE
 00000468  6A 00			push 0
 0000046A  E8 00000000 E		call ExitProcess
 0000046F			SOMETHINGWRONG::
 0000046F  68 00000000 R		push offset null_division
 00000474  E8 00000000 E		call soutl
 00000479  EB 0A		jmp THEEND
 0000047B			overflow::
 0000047B  68 00000018 R		push offset OVER_FLOW
 00000480  E8 00000000 E		call soutl
 00000485			THEEND:
 00000485  E8 00000000 E		call SYSPAUSE
 0000048A  6A FF			push -1
 0000048C  E8 00000000 E		call ExitProcess
 00000491			main ENDP
				end main
Microsoft (R) Macro Assembler Version 14.41.34120.0	    12/17/24 18:59:43
LPA-2024_ASM.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000147 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000048 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000491 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SYSPAUSE . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_strduplicate  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_strlength . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_strtransint . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000083 _TEXT	Length= 0000040E Public STDCALL
  pravda760T . . . . . . . . . .	L Near	 0000036D _TEXT	
  pravda760F . . . . . . . . . .	L Near	 00000379 _TEXT	
  pravda760  . . . . . . . . . .	L Near	 00000383 _TEXT	
  cycle1 . . . . . . . . . . . .	L Near	 00000424 _TEXT	
  cycleEnd1  . . . . . . . . . .	L Near	 00000463 _TEXT	
  THEEND . . . . . . . . . . . .	L Near	 00000485 _TEXT	
noutl  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
soutl  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
testfunc11 . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public STDCALL
  a1 . . . . . . . . . . . . . .	DWord	 bp + 00000008
  b1 . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  local0 . . . . . . . . . . . .	L Near	 00000032 _TEXT	
testfunc22 . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 00000018 Public STDCALL
  parm12 . . . . . . . . . . . .	DWord	 bp + 00000008
  local1 . . . . . . . . . . . .	L Near	 0000004A _TEXT	
testfunc43 . . . . . . . . . . .	P Near	 0000004F _TEXT	Length= 00000034 Public STDCALL
  chetnoe3 . . . . . . . . . . .	DWord	 bp + 00000008
  local2 . . . . . . . . . . . .	L Near	 0000007E _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
OVER_FLOW  . . . . . . . . . . .	Byte	 00000018 CONST	
SOMETHINGWRONG . . . . . . . . .	L Near	 0000046F _TEXT	
a76  . . . . . . . . . . . . . .	DWord	 0000001C _DATA	
b76  . . . . . . . . . . . . . .	DWord	 00000020 _DATA	
bool5  . . . . . . . . . . . . .	DWord	 00000055 CONST	
bt76 . . . . . . . . . . . . . .	DWord	 00000014 _DATA	
char6  . . . . . . . . . . . . .	Byte	 00000059 CONST	
copystr76  . . . . . . . . . . .	DWord	 00000038 _DATA	
ct76 . . . . . . . . . . . . . .	DWord	 00000018 _DATA	
dlina76  . . . . . . . . . . . .	DWord	 0000003C _DATA	
false  . . . . . . . . . . . . .	Byte	 0000002D CONST	
i76  . . . . . . . . . . . . . .	DWord	 00000044 _DATA	
it76 . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
null_division  . . . . . . . . .	Byte	 00000000 CONST	
number76 . . . . . . . . . . . .	DWord	 00000028 _DATA	
overflow . . . . . . . . . . . .	L Near	 0000047B _TEXT	
parm176  . . . . . . . . . . . .	DWord	 00000024 _DATA	
parm231  . . . . . . . . . . . .	DWord	 00000004 _DATA	
phah57 . . . . . . . . . . . . .	DWord	 00000008 _DATA	
pravda76 . . . . . . . . . . . .	DWord	 0000002C _DATA	
res10  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
short10  . . . . . . . . . . . .	DWord	 0000007B CONST	
short12  . . . . . . . . . . . .	DWord	 0000008A CONST	
short13  . . . . . . . . . . . .	DWord	 0000008E CONST	
short15  . . . . . . . . . . . .	DWord	 0000009B CONST	
short16  . . . . . . . . . . . .	DWord	 0000009F CONST	
short18  . . . . . . . . . . . .	DWord	 000000B7 CONST	
short19  . . . . . . . . . . . .	DWord	 000000BB CONST	
short1 . . . . . . . . . . . . .	DWord	 0000003E CONST	
short21  . . . . . . . . . . . .	DWord	 000000C6 CONST	
short22  . . . . . . . . . . . .	DWord	 000000CA CONST	
short24  . . . . . . . . . . . .	DWord	 000000D7 CONST	
short25  . . . . . . . . . . . .	DWord	 000000DB CONST	
short26  . . . . . . . . . . . .	DWord	 000000DF CONST	
short28  . . . . . . . . . . . .	DWord	 000000F4 CONST	
short29  . . . . . . . . . . . .	DWord	 000000F8 CONST	
short2 . . . . . . . . . . . . .	DWord	 00000042 CONST	
short30  . . . . . . . . . . . .	DWord	 000000FC CONST	
short33  . . . . . . . . . . . .	DWord	 0000011A CONST	
short34  . . . . . . . . . . . .	DWord	 0000011E CONST	
short35  . . . . . . . . . . . .	DWord	 00000122 CONST	
short38  . . . . . . . . . . . .	DWord	 0000013B CONST	
short39  . . . . . . . . . . . .	DWord	 0000013F CONST	
short3 . . . . . . . . . . . . .	DWord	 00000046 CONST	
short40  . . . . . . . . . . . .	DWord	 00000143 CONST	
short8 . . . . . . . . . . . . .	DWord	 00000073 CONST	
short9 . . . . . . . . . . . . .	DWord	 00000077 CONST	
st76 . . . . . . . . . . . . . .	DWord	 00000010 _DATA	
str0 . . . . . . . . . . . . . .	Byte	 00000033 CONST	
str11  . . . . . . . . . . . . .	Byte	 0000007F CONST	
str14  . . . . . . . . . . . . .	Byte	 00000092 CONST	
str17  . . . . . . . . . . . . .	Byte	 000000A3 CONST	
str20  . . . . . . . . . . . . .	Byte	 000000BF CONST	
str23  . . . . . . . . . . . . .	Byte	 000000CE CONST	
str27  . . . . . . . . . . . . .	Byte	 000000E3 CONST	
str31  . . . . . . . . . . . . .	Byte	 00000100 CONST	
str32  . . . . . . . . . . . . .	Byte	 00000110 CONST	
str36  . . . . . . . . . . . . .	Byte	 00000126 CONST	
str37  . . . . . . . . . . . . .	Byte	 00000137 CONST	
str4 . . . . . . . . . . . . . .	Byte	 0000004A CONST	
str7 . . . . . . . . . . . . . .	Byte	 0000005A CONST	
strchislo76  . . . . . . . . . .	DWord	 00000040 _DATA	
stroka76 . . . . . . . . . . . .	DWord	 00000030 _DATA	
strokachislo76 . . . . . . . . .	DWord	 00000034 _DATA	
true . . . . . . . . . . . . . .	Byte	 00000028 CONST	

	   0 Warnings
	   2 Errors
