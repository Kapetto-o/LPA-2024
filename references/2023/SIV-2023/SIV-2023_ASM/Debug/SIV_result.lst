Microsoft (R) Macro Assembler Version 14.41.34123.0	    12/17/24 10:21:09
..\SIV_result.asm					     Page 1 - 1


				.586
				.model flat, stdcall
				includelib libucrt.lib
				includelib kernel32.lib

				ExitProcess PROTO:DWORD 
				SYSPAUSE PROTO 
				soutl PROTO : BYTE 
				noutl PROTO : SDWORD 
				_pow PROTO  : SDWORD, : SDWORD 
				_abs PROTO  : SDWORD 

				.STACK 4096

 00000000			.CONST
 00000000 45 52 52 4F 52		null_division BYTE 'ERROR: DIVISION BY ZERO', 0
	   3A 20 44 49 56
	   49 53 49 4F 4E
	   20 42 59 20 5A
	   45 52 4F 00
 00000018 45 52 52 4F 52		OVER_FLOW BYTE 'ERROR: OVERFLOW', 0
	   3A 20 4F 56 45
	   52 46 4C 4F 57
	   00
 00000028 74 72 75 65 00		true BYTE 'true', 0
 0000002D 66 61 6C 73 65		false BYTE 'false', 0
	   00
 00000033 FFFFFFFF			short0 SDWORD -1
 00000037 00000000			short1 SDWORD 0
 0000003B 48 65 6C 6C 6F		str2 BYTE "Hello there!", 0
	   20 74 68 65 72
	   65 21 00
 00000048 C0 F0 E8 F4 EC		str3 BYTE "Арифм. операции:", 0
	   2E 20 EE EF E5
	   F0 E0 F6 E8 E8
	   3A 00
 00000059 0000001A			short4 SDWORD 26
 0000005D 0000000D			short5 SDWORD 13
 00000061 CA EE ED F2 F0		str6 BYTE "Контрольный пример выражения: ", 0
	   EE EB FC ED FB
	   E9 20 EF F0 E8
	   EC E5 F0 20 E2
	   FB F0 E0 E6 E5
	   ED E8 FF 3A 20
	   00
 00000080 00000005			short7 SDWORD 5
 00000084 0000000B			short8 SDWORD 11
 00000088 00000002			short9 SDWORD 2
 0000008C 000000B2			short10 SDWORD 178
 00000090 00000013			short11 SDWORD 19
 00000094 000000FF			short12 SDWORD 255
 00000098 00000013			short13 SDWORD 19
 0000009C 46 46 48 20 2B		str14 BYTE "FFH + 23O = ", 0
	   20 32 33 4F 20
	   3D 20 00
 000000A9 C2 FB E7 EE E2		str15 BYTE "Вызов функции:", 0
	   20 F4 F3 ED EA
	   F6 E8 E8 3A 00
 000000B8 FFFFFFFC			short16 SDWORD -4
 000000BC 00000003			short17 SDWORD 3
 000000C0 D3 F1 EB EE E2		str18 BYTE "Условный оператор:", 0
	   ED FB E9 20 EE
	   EF E5 F0 E0 F2
	   EE F0 3A 00
 000000D3 00000000			short19 SDWORD 0
 000000D7 70 6F 73 69 74		str20 BYTE "positive", 0
	   69 76 65 00
 000000E0 00000001			short21 SDWORD 1
 000000E4 6E 65 67 61 74		str22 BYTE "negative", 0
	   69 76 65 00
 000000ED FFFFFFFF			short23 SDWORD -1
 000000F1 00000001			bool24 DWORD 1
 000000F5 49 74 73 20 74		str25 BYTE "Its true", 0
	   72 75 65 00
 000000FE 49 74 73 20 66		str26 BYTE "Its false", 0
	   61 6C 73 65 00
 00000000			.DATA
 00000000 00000000			res10 SDWORD 0
 00000004 00000000			str163 DWORD ?
 00000008 00000000			i63 SDWORD 0
 0000000C 00000000			num63 SDWORD 0
 00000010 00000000			c63 SDWORD 0
 00000014 00000000			flag63 DWORD 0

 00000000			.CODE

 00000000			func1 PROC b1 : SDWORD, a1 : SDWORD
 00000003  FF 35 00000033 R		push short0
 00000009  58				pop eax
 0000000A  3D 00007FFF			cmp eax, 32767
 0000000F  0F 8F 00000282		jg overflow
 00000015  3D FFFF8000			cmp eax, -32768
 0000001A  0F 8C 00000277		jl overflow
 00000020  A3 00000000 R		mov res10, eax
 00000025  8B 45 0C			mov eax, a1
 00000028  3B 05 00000037 R		cmp eax, short1
 0000002E  7C 02			jl ifi1
 00000030  7D 27			jge else1
 00000032			ifi1:
 00000032  FF 75 0C			push a1
 00000035  E8 00000000 E		call _abs
 0000003A  50				push eax
 0000003B  58				pop eax
 0000003C  3D 00007FFF			cmp eax, 32767
 00000041  0F 8F 00000250		jg overflow
 00000047  3D FFFF8000			cmp eax, -32768
 0000004C  0F 8C 00000245		jl overflow
 00000052  A3 00000000 R		mov res10, eax
 00000057  EB 28			jmp ifEnd1
 00000059			else1:
 00000059  FF 75 0C			push a1
 0000005C  FF 75 08			push b1
 0000005F  E8 00000000 E		call _pow
 00000064  50				push eax
 00000065  58				pop eax
 00000066  3D 00007FFF			cmp eax, 32767
 0000006B  0F 8F 00000226		jg overflow
 00000071  3D FFFF8000			cmp eax, -32768
 00000076  0F 8C 0000021B		jl overflow
 0000007C  A3 00000000 R		mov res10, eax
 00000081			ifEnd1:
 00000081  FF 35 00000000 R		push res10
 00000087  EB 00			jmp local0
 00000089			local0:
 00000089  58				pop eax
					ret
 0000008E			func1 ENDP

 0000008E			setstring2 PROC s2 : DWORD
 00000091  FF 75 08			push s2
 00000094  EB 00			jmp local1
 00000096			local1:
 00000096  58				pop eax
					ret
 0000009B			setstring2 ENDP

 0000009B			main PROC
 0000009B  68 0000003B R		push offset str2
 000000A0  E8 FFFFFFE9			call setstring2
 000000A5  50				push eax
 000000A6  8F 05 00000004 R		pop str163


 000000AC  FF 35 00000004 R	push str163
 000000B2  E8 00000000 E	call soutl

 000000B7  68 00000048 R	push offset str3
 000000BC  E8 00000000 E	call soutl
 000000C1  FF 35 00000059 R		push short4
 000000C7  FF 35 0000005D R		push short5
 000000CD  5B				pop ebx
 000000CE  58				pop eax
 000000CF  83 FB 00			cmp ebx,0
 000000D2  0F 84 000001B3		je SOMETHINGWRONG
 000000D8  99				cdq
 000000D9  F7 FB			idiv ebx
 000000DB  50				push eax
 000000DC  58				pop eax
 000000DD  3D 00007FFF			cmp eax, 32767
 000000E2  0F 8F 000001AF		jg overflow
 000000E8  3D FFFF8000			cmp eax, -32768
 000000ED  0F 8C 000001A4		jl overflow
 000000F3  A3 00000008 R		mov i63, eax

 000000F8  FF 35 00000008 R	push i63
 000000FE  E8 00000000 E	call noutl

 00000103  68 00000061 R	push offset str6
 00000108  E8 00000000 E	call soutl
 0000010D  FF 35 00000080 R		push short7
 00000113  FF 35 00000084 R		push short8
 00000119  FF 35 00000088 R		push short9
 0000011F  E8 00000000 E		call _pow
 00000124  50				push eax
 00000125  FF 35 0000008C R		push short10
 0000012B  5B				pop ebx
 0000012C  58				pop eax
 0000012D  2B C3			sub eax, ebx
 0000012F  50				push eax
 00000130  58				pop eax
 00000131  5B				pop ebx
 00000132  F7 E3			mul ebx
 00000134  50				push eax
 00000135  FF 35 00000090 R		push short11
 0000013B  58				pop eax
 0000013C  5B				pop ebx
 0000013D  03 C3			add eax, ebx
 0000013F  50				push eax
 00000140  58				pop eax
 00000141  3D 00007FFF			cmp eax, 32767
 00000146  0F 8F 0000014B		jg overflow
 0000014C  3D FFFF8000			cmp eax, -32768
 00000151  0F 8C 00000140		jl overflow
 00000157  A3 00000008 R		mov i63, eax

 0000015C  FF 35 00000008 R	push i63
 00000162  E8 00000000 E	call noutl
 00000167  FF 35 00000094 R		push short12
 0000016D  FF 35 00000098 R		push short13
 00000173  58				pop eax
 00000174  5B				pop ebx
 00000175  03 C3			add eax, ebx
 00000177  50				push eax
 00000178  58				pop eax
 00000179  3D 00007FFF			cmp eax, 32767
 0000017E  0F 8F 00000113		jg overflow
 00000184  3D FFFF8000			cmp eax, -32768
 00000189  0F 8C 00000108		jl overflow
 0000018F  A3 00000008 R		mov i63, eax

 00000194  68 0000009C R	push offset str14
 00000199  E8 00000000 E	call soutl

 0000019E  FF 35 00000008 R	push i63
 000001A4  E8 00000000 E	call noutl

 000001A9  68 000000A9 R	push offset str15
 000001AE  E8 00000000 E	call soutl
 000001B3  FF 35 000000B8 R		push short16
 000001B9  FF 35 000000BC R		push short17
 000001BF  E8 FFFFFE3C			call func1
 000001C4  50				push eax
 000001C5  58				pop eax
 000001C6  3D 00007FFF			cmp eax, 32767
 000001CB  0F 8F 000000C6		jg overflow
 000001D1  3D FFFF8000			cmp eax, -32768
 000001D6  0F 8C 000000BB		jl overflow
 000001DC  A3 0000000C R		mov num63, eax

 000001E1  FF 35 0000000C R	push num63
 000001E7  E8 00000000 E	call noutl

 000001EC  68 000000C0 R	push offset str18
 000001F1  E8 00000000 E	call soutl
 000001F6  A1 00000008 R		mov eax, i63
 000001FB  3B 05 000000D3 R		cmp eax, short19
 00000201  7D 02			jge ifi2
 00000203  7C 26			jl else2
 00000205			ifi2:

 00000205  68 000000D7 R	push offset str20
 0000020A  E8 00000000 E	call soutl
 0000020F  FF 35 000000E0 R		push short21
 00000215  58				pop eax
 00000216  3D 00007FFF			cmp eax, 32767
 0000021B  7F 7A			jg overflow
 0000021D  3D FFFF8000			cmp eax, -32768
 00000222  7C 73			jl overflow
 00000224  A3 00000010 R		mov c63, eax
 00000229  EB 24			jmp ifEnd2
 0000022B			else2:

 0000022B  68 000000E4 R	push offset str22
 00000230  E8 00000000 E	call soutl
 00000235  FF 35 000000ED R		push short23
 0000023B  58				pop eax
 0000023C  3D 00007FFF			cmp eax, 32767
 00000241  7F 54			jg overflow
 00000243  3D FFFF8000			cmp eax, -32768
 00000248  7C 4D			jl overflow
 0000024A  A3 00000010 R		mov c63, eax
 0000024F			ifEnd2:

 0000024F  FF 35 00000010 R	push c63
 00000255  E8 00000000 E	call noutl
 0000025A  A1 00000014 R		mov eax, flag63
 0000025F  3B 05 000000F1 R		cmp eax, bool24
 00000265  74 02			jz ifi3
 00000267  75 0C			jnz else3
 00000269			ifi3:

 00000269  68 000000F5 R	push offset str25
 0000026E  E8 00000000 E	call soutl
 00000273  EB 0A			jmp ifEnd3
 00000275			else3:

 00000275  68 000000FE R	push offset str26
 0000027A  E8 00000000 E	call soutl
 0000027F			ifEnd3:
 0000027F  E8 00000000 E		call SYSPAUSE
 00000284  6A 00			push 0
 00000286  E8 00000000 E		call ExitProcess
 0000028B			SOMETHINGWRONG::
 0000028B  68 00000000 R		push offset null_division
 00000290  E8 00000000 E		call soutl
 00000295  EB 0A		jmp THEEND
 00000297			overflow::
 00000297  68 00000018 R		push offset OVER_FLOW
 0000029C  E8 00000000 E		call soutl
 000002A1			THEEND:
 000002A1  E8 00000000 E		call SYSPAUSE
 000002A6  6A FF			push -1
 000002A8  E8 00000000 E		call ExitProcess
 000002AD			main ENDP
				end main
Microsoft (R) Macro Assembler Version 14.41.34123.0	    12/17/24 10:21:09
..\SIV_result.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000108 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000018 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SYSPAUSE . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_abs . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_pow . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
func1  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000008E Public STDCALL
  b1 . . . . . . . . . . . . . .	DWord	 bp + 00000008
  a1 . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  ifi1 . . . . . . . . . . . . .	L Near	 00000032 _TEXT	
  else1  . . . . . . . . . . . .	L Near	 00000059 _TEXT	
  ifEnd1 . . . . . . . . . . . .	L Near	 00000081 _TEXT	
  local0 . . . . . . . . . . . .	L Near	 00000089 _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 00000212 Public STDCALL
  ifi2 . . . . . . . . . . . . .	L Near	 00000205 _TEXT	
  else2  . . . . . . . . . . . .	L Near	 0000022B _TEXT	
  ifEnd2 . . . . . . . . . . . .	L Near	 0000024F _TEXT	
  ifi3 . . . . . . . . . . . . .	L Near	 00000269 _TEXT	
  else3  . . . . . . . . . . . .	L Near	 00000275 _TEXT	
  ifEnd3 . . . . . . . . . . . .	L Near	 0000027F _TEXT	
  THEEND . . . . . . . . . . . .	L Near	 000002A1 _TEXT	
noutl  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
setstring2 . . . . . . . . . . .	P Near	 0000008E _TEXT	Length= 0000000D Public STDCALL
  s2 . . . . . . . . . . . . . .	DWord	 bp + 00000008
  local1 . . . . . . . . . . . .	L Near	 00000096 _TEXT	
soutl  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
OVER_FLOW  . . . . . . . . . . .	Byte	 00000018 CONST	
SOMETHINGWRONG . . . . . . . . .	L Near	 0000028B _TEXT	
bool24 . . . . . . . . . . . . .	DWord	 000000F1 CONST	
c63  . . . . . . . . . . . . . .	DWord	 00000010 _DATA	
false  . . . . . . . . . . . . .	Byte	 0000002D CONST	
flag63 . . . . . . . . . . . . .	DWord	 00000014 _DATA	
i63  . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
null_division  . . . . . . . . .	Byte	 00000000 CONST	
num63  . . . . . . . . . . . . .	DWord	 0000000C _DATA	
overflow . . . . . . . . . . . .	L Near	 00000297 _TEXT	
res10  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
short0 . . . . . . . . . . . . .	DWord	 00000033 CONST	
short10  . . . . . . . . . . . .	DWord	 0000008C CONST	
short11  . . . . . . . . . . . .	DWord	 00000090 CONST	
short12  . . . . . . . . . . . .	DWord	 00000094 CONST	
short13  . . . . . . . . . . . .	DWord	 00000098 CONST	
short16  . . . . . . . . . . . .	DWord	 000000B8 CONST	
short17  . . . . . . . . . . . .	DWord	 000000BC CONST	
short19  . . . . . . . . . . . .	DWord	 000000D3 CONST	
short1 . . . . . . . . . . . . .	DWord	 00000037 CONST	
short21  . . . . . . . . . . . .	DWord	 000000E0 CONST	
short23  . . . . . . . . . . . .	DWord	 000000ED CONST	
short4 . . . . . . . . . . . . .	DWord	 00000059 CONST	
short5 . . . . . . . . . . . . .	DWord	 0000005D CONST	
short7 . . . . . . . . . . . . .	DWord	 00000080 CONST	
short8 . . . . . . . . . . . . .	DWord	 00000084 CONST	
short9 . . . . . . . . . . . . .	DWord	 00000088 CONST	
str14  . . . . . . . . . . . . .	Byte	 0000009C CONST	
str15  . . . . . . . . . . . . .	Byte	 000000A9 CONST	
str163 . . . . . . . . . . . . .	DWord	 00000004 _DATA	
str18  . . . . . . . . . . . . .	Byte	 000000C0 CONST	
str20  . . . . . . . . . . . . .	Byte	 000000D7 CONST	
str22  . . . . . . . . . . . . .	Byte	 000000E4 CONST	
str25  . . . . . . . . . . . . .	Byte	 000000F5 CONST	
str26  . . . . . . . . . . . . .	Byte	 000000FE CONST	
str2 . . . . . . . . . . . . . .	Byte	 0000003B CONST	
str3 . . . . . . . . . . . . . .	Byte	 00000048 CONST	
str6 . . . . . . . . . . . . . .	Byte	 00000061 CONST	
true . . . . . . . . . . . . . .	Byte	 00000028 CONST	

	   0 Warnings
	   0 Errors
